package gui;

import datastructures.tables.ETable;
import datastructures.tables.ITable;
import datastructures.tables.Sorts.ISortableTable;
import datastructures.tables.Sorts.KeyComparer;
import datastructures.tables.Sorts.Sorter;

/**
 *
 * @author Michal Varga
 */
public class PanelTable extends javax.swing.JPanel {

    private static final int INSERT = 1;
    private static final int DELETE = 2;
    private static final int FIND = 3;
    private static final int MODIFY = 4;
    private static final int SIZE = 5;
    private static final int CLEAR = 6; 
    private static final int CONTAINS_KEY = 7;
    private static final int SORT = 8;
    
    private ITable aTable;
    private IEditData aEditData;        
    
    private void setEnabledComponents(boolean paValue) {
        btnInsert.setEnabled(paValue);
        btnDelete.setEnabled(paValue);
        btnFind.setEnabled(paValue);
        btnModify.setEnabled(paValue);
        btnSize.setEnabled(paValue);
        btnClear.setEnabled(paValue);
        btnContainsKey.setEnabled(paValue);
    }
    
    /**
     * Creates new form PanelTable
     */
    public PanelTable() {
        initComponents();
        
        aTable = null;
        aEditData = null;
        
        setEnabledComponents(false);
        
        panelOperations.registerOperation(INSERT, "Insert");
        panelOperations.registerOperation(DELETE, "Delete");
        panelOperations.registerOperation(FIND, "Find");
        panelOperations.registerOperation(MODIFY, "Modify");
        panelOperations.registerOperation(SIZE, "Size");
        panelOperations.registerOperation(CLEAR, "Clear");  
        panelOperations.registerOperation(CONTAINS_KEY, "Contains key");  
        panelOperations.registerOperation(SORT, "Sort");
    }
    
    public void init(ITable paTable, IEditData paEditData) {
        aTable = paTable;
        aEditData = paEditData;
        
        Routines.ListTableElements(aTable, tableElements);
        
        setEnabledComponents(true); 
        toolsSorts.setVisible(false);
    }
    
    public void registerSort(Sorter paSorter, KeyComparer paComparer, String paCaption) {
        if (! (aTable instanceof ISortableTable)) {
            Routines.errorBox("Table does not support sorting!", "Error");
        }
        else {
            SortHolder holder = new SortHolder(paSorter,paComparer,paCaption);
            cbxSort.addItem(holder);
            cbxSort.setSelectedItem(holder);
            toolsSorts.setVisible(true);
        }
    }
    
    private class SortHolder {
        Sorter aSorter;
        KeyComparer aComparer;
        String aCaption;
        
        SortHolder(Sorter paSorter, KeyComparer paComparer, String paCaption) {
            aSorter = paSorter;
            aComparer = paComparer;
            aCaption = paCaption;
        }
        
        @Override
        public String toString() {
            return aCaption;
        }
        
        void performSort() throws ETable{
            aSorter.sort((ISortableTable)aTable, aComparer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolsTable = new javax.swing.JToolBar();
        lblOperationsTable = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnSize = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnContainsKey = new javax.swing.JButton();
        btnFillUp = new javax.swing.JButton();
        panelOperations = new gui.PanelOperations();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableElements = new javax.swing.JTable();
        toolsSorts = new javax.swing.JToolBar();
        cbxSort = new javax.swing.JComboBox();
        btnSort = new javax.swing.JButton();

        toolsTable.setRollover(true);

        lblOperationsTable.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblOperationsTable.setText("Operations:");
        toolsTable.add(lblOperationsTable);

        btnInsert.setText("Insert");
        btnInsert.setFocusable(false);
        btnInsert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInsert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        toolsTable.add(btnInsert);

        btnDelete.setText("Delete");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        toolsTable.add(btnDelete);

        btnFind.setText("Find");
        btnFind.setFocusable(false);
        btnFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });
        toolsTable.add(btnFind);

        btnModify.setText("Modify");
        btnModify.setFocusable(false);
        btnModify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });
        toolsTable.add(btnModify);

        btnSize.setText("Size");
        btnSize.setFocusable(false);
        btnSize.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSize.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSizeActionPerformed(evt);
            }
        });
        toolsTable.add(btnSize);

        btnClear.setText("Clear");
        btnClear.setFocusable(false);
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        toolsTable.add(btnClear);

        btnContainsKey.setText("Contains key?");
        btnContainsKey.setFocusable(false);
        btnContainsKey.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnContainsKey.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnContainsKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContainsKeyActionPerformed(evt);
            }
        });
        toolsTable.add(btnContainsKey);

        btnFillUp.setText("Fill up");
        btnFillUp.setFocusable(false);
        btnFillUp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFillUp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFillUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillUpActionPerformed(evt);
            }
        });
        toolsTable.add(btnFillUp);

        tableElements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key", "Element"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableElements.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableElements);

        toolsSorts.setRollover(true);

        toolsSorts.add(cbxSort);

        btnSort.setText("Sort");
        btnSort.setFocusable(false);
        btnSort.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSort.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });
        toolsSorts.add(btnSort);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolsTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelOperations, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
            .addComponent(toolsSorts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolsSorts, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       try { 
            panelOperations.start(CLEAR);
            aTable.clear();
            panelOperations.finish(CLEAR,true);
            Routines.ListTableElements(aTable, tableElements);
        } catch (ETable ex) {
            panelOperations.except(CLEAR,ex,true);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSizeActionPerformed
        try { 
            panelOperations.start(SIZE);
            int size = aTable.size();        
            panelOperations.finish(SIZE,Integer.toString(size),true);
        } catch (ETable ex) {
            panelOperations.except(SIZE,ex,true);
        }
    }//GEN-LAST:event_btnSizeActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try {
            Object data = aEditData.createData();
            int key = Routines.getIntDialog("Enter key");
            if (data != null) {  
                panelOperations.start(INSERT);
                aTable.insert(key, data);
                panelOperations.finish(INSERT,true);
            }
            else
               panelOperations.abort(INSERT,true);
        } catch (ETable ex) {
            panelOperations.except(INSERT,ex,true);
        }
        
        Routines.ListTableElements(aTable, tableElements);
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int key = Routines.getIntDialog("Enter key");
            panelOperations.start(DELETE);
            aTable.delete(key);
            panelOperations.finish(DELETE,true);
        } catch (ETable ex) {
            panelOperations.except(DELETE,ex,true);
        }
        
        Routines.ListTableElements(aTable, tableElements);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try {
            int key = Routines.getIntDialog("Enter key");
            panelOperations.start(FIND);
            Object data = aTable.find(key);
            panelOperations.finish(FIND,true);
            if (data != null)
                Routines.infoBox(data.toString(), "Find result");
            else
                Routines.errorBox("No entry with key " + key + " found!", "Find result");
        } catch (ETable ex) {
            panelOperations.except(FIND,ex,true);
        }        
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        try {            
            int key = Routines.getIntDialog("Enter key");
            Object data = aEditData.createData();
            if (data != null) {  
                panelOperations.start(MODIFY);
                aTable.modify(key, data);
                panelOperations.finish(MODIFY,true);
            }
            else
               panelOperations.abort(MODIFY,true);
        } catch (ETable ex) {
            panelOperations.except(MODIFY,ex,true);
        }
        
        Routines.ListTableElements(aTable, tableElements);
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnContainsKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContainsKeyActionPerformed
        try {
            int key = Routines.getIntDialog("Enter key");
            panelOperations.start(CONTAINS_KEY);
            boolean contains = aTable.containsKey(key);        
            panelOperations.finish(CONTAINS_KEY,Boolean.toString(contains),true);
        } catch (ETable ex) {
            panelOperations.except(CONTAINS_KEY,ex,true);
        }
    }//GEN-LAST:event_btnContainsKeyActionPerformed

    private void btnFillUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillUpActionPerformed
        try {            
            int count = Routines.getIntDialog("Number of elements");
            if (count != -1) {
                panelOperations.start(INSERT);                
                
                int inserted = 0;
                while(inserted < count) {
                    int key = Routines.random(count * 100);
                    if (!aTable.containsKey(key)) {
                        aTable.insert(key, aEditData.createRandomData());
                        inserted++;
                    }
                }
                                
                long time = panelOperations.finish(INSERT,true); 
                panelOperations.log("Average time: " + (time/(double)count) + PanelOperations.UNITS);                
            }
            else
                 panelOperations.abort(INSERT,true);
        } catch (ETable ex) {
            panelOperations.except(INSERT,ex,true);
        }     
         
         Routines.ListTableElements(aTable, tableElements);
    }//GEN-LAST:event_btnFillUpActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        try {
            SortHolder holder = (SortHolder)cbxSort.getSelectedItem();
            panelOperations.log(holder.toString());
            panelOperations.start(SORT);
            
            holder.performSort();
            
            panelOperations.finish(SORT, true);
        } catch(ETable ex) {
            panelOperations.except(SORT, ex, true);
        }
        
        Routines.ListTableElements(aTable, tableElements);
    }//GEN-LAST:event_btnSortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnContainsKey;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFillUp;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnSize;
    private javax.swing.JButton btnSort;
    private javax.swing.JComboBox cbxSort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOperationsTable;
    private gui.PanelOperations panelOperations;
    private javax.swing.JTable tableElements;
    private javax.swing.JToolBar toolsSorts;
    private javax.swing.JToolBar toolsTable;
    // End of variables declaration//GEN-END:variables
}
