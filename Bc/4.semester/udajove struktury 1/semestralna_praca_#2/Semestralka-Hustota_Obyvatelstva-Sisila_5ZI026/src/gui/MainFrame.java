package gui;

import exception.ETabulka;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import tables.ETable;
import tables.ITable;
import semestralka.Krajina;
import semestralka.Okres;
import tables.Sorts.OkresAbsPrirastokComparer;
import tables.Sorts.OkresPocetComparer;
import tables.Sorts.OkresSorter;
import semestralka.Sidlo;
import tables.Sorts.OkresPercPrirastokComparer;
import tables.Sorts.SidloAbsPrirastokComparer;
import tables.Sorts.SidloPercPrirastokComparer;
import tables.Sorts.SidloPocetComparer;
import tables.Sorts.SidloSorter;
import tables.TablePair;

/**
 *
 * @author Andrej Šišila
 */
public class MainFrame extends javax.swing.JFrame {

    private Krajina aLand;
    private static int kolkyRiadok = 1; //sluzi na debuggovacie ucely - hlada riadky v subore, ktore sposobuju vynimku
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        aLand = new Krajina();
        //maximalizuj okno po spusteni
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent e) {
                setExtendedState(MAXIMIZED_BOTH);
                }
            }
        );
        
    }
    
    public static int getKolkyRiadok(){
        return kolkyRiadok;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelOkresyASidla = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOfDistrictsAndTowns = new javax.swing.JTable();
        panelSidla = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOfTowns = new javax.swing.JTable();
        panelOkresy = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableOfDistricts = new javax.swing.JTable();
        panelSidielOkresu = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableOfTownsFromDistrict = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        itemLoadFromFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        itemVyhladajSidloPodlaNazvu = new javax.swing.JMenuItem();
        itemVyhladajOkresPodlaNazvu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRoku = new javax.swing.JMenuItem();
        itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();
        itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRoku = new javax.swing.JMenuItem();
        itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();
        itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ZoradOkresyPodlaPoctuObyvatelovVDanomRoku = new javax.swing.JMenuItem();
        itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();
        itemZoradOkresyPodlaPercPrirastkuVRozmedziRokov = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        tableOfDistrictsAndTowns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableOfDistrictsAndTowns.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tableOfDistrictsAndTowns);

        panelOkresyASidla.addTab("Okresy & Sidla", jScrollPane1);

        panelSidla.setLayout(new java.awt.BorderLayout());

        tableOfTowns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableOfTowns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOfTownsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableOfTowns);

        panelSidla.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        panelOkresyASidla.addTab("Sidla", panelSidla);

        panelOkresy.setLayout(new java.awt.BorderLayout());

        tableOfDistricts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableOfDistricts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOfDistrictsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableOfDistricts);

        panelOkresy.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        panelOkresyASidla.addTab("Okresy", panelOkresy);

        panelSidielOkresu.setLayout(new java.awt.BorderLayout());

        tableOfTownsFromDistrict.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableOfTownsFromDistrict.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOfTownsFromDistrictMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableOfTownsFromDistrict);

        panelSidielOkresu.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        panelOkresyASidla.addTab("Sidla okresu", panelSidielOkresu);

        getContentPane().add(panelOkresyASidla);

        menuFile.setText("Subor");

        itemLoadFromFile.setText("Nacitaj zo suboru");
        itemLoadFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLoadFromFileActionPerformed(evt);
            }
        });
        menuFile.add(itemLoadFromFile);

        menuBar.add(menuFile);

        jMenu2.setText("Vyhladaj");

        itemVyhladajSidloPodlaNazvu.setText("Vyhladaj sidlo podla nazvu");
        itemVyhladajSidloPodlaNazvu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemVyhladajSidloPodlaNazvuActionPerformed(evt);
            }
        });
        jMenu2.add(itemVyhladajSidloPodlaNazvu);

        itemVyhladajOkresPodlaNazvu.setText("Vyhladaj okres podla nazvu");
        itemVyhladajOkresPodlaNazvu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemVyhladajOkresPodlaNazvuActionPerformed(evt);
            }
        });
        jMenu2.add(itemVyhladajOkresPodlaNazvu);

        menuBar.add(jMenu2);

        jMenu1.setText("Zorad");

        itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRoku.setText("Zorad vsetky sidla podla poctu obyvatelov v danom roku");
        itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRoku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRokuActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRoku);

        itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokov.setText("Zorad vsetky sidla podla absolutneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokov);

        itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokov.setText("Zorad vsetky sidla podla percentualneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokov);
        jMenu1.add(jSeparator1);

        itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRoku.setText("Zorad sidla zvoleneho okresu podla poctu obyvatelov v danom roku");
        itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRoku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRokuActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRoku);

        itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokov.setText("Zorad sidla zvoleneho okresu podla absolutneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokov);

        itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokov.setText("Zorad sidla zvoleneho okresu podla percentualneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokov);
        jMenu1.add(jSeparator2);

        ZoradOkresyPodlaPoctuObyvatelovVDanomRoku.setText("Zorad okresy podla poctu obyvatelov v danom roku");
        ZoradOkresyPodlaPoctuObyvatelovVDanomRoku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoradOkresyPodlaPoctuObyvatelovVDanomRokuActionPerformed(evt);
            }
        });
        jMenu1.add(ZoradOkresyPodlaPoctuObyvatelovVDanomRoku);

        itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokov.setText("Zorad okresy podla absolutneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokov);

        itemZoradOkresyPodlaPercPrirastkuVRozmedziRokov.setText("Zorad okresy podla percentualneho prirastku obyvatelstva vo zvolenom rozmedzi rokov");
        itemZoradOkresyPodlaPercPrirastkuVRozmedziRokov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemZoradOkresyPodlaPercPrirastkuVRozmedziRokovActionPerformed(evt);
            }
        });
        jMenu1.add(itemZoradOkresyPodlaPercPrirastkuVRozmedziRokov);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ListTableDistrictAndTowns(ITable paStructure, JTable paTable) throws ETable {
        
        DefaultTableModel dtm = new DefaultTableModel(0,0) {

            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        
        //DefaultTableModel dtm = new DefaultTableModel(0,0);
        dtm.setColumnIdentifiers(new String[] {"Okres","Sidla"});
        paTable.setModel(dtm);
        for(Object pair : paStructure) 
            dtm.addRow(new Object[] { ((TablePair)pair).getKey(),
                                      ((TablePair)pair).getElement(),
                                    });
        
        TableColumn column = null;
        column = paTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(200);
        column = paTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(52800);
    }
    
    public void ListTableTowns(ITable paStructure, JTable paTable) throws ETable {
        
        DefaultTableModel dtm = new DefaultTableModel(0,0) {

            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        
        //DefaultTableModel dtm = new DefaultTableModel(0,0);
        dtm.setColumnIdentifiers(new String[] {"Sidlo","Informacie"});
        paTable.setModel(dtm);
        for(Object pair : paStructure) 
            dtm.addRow(new Object[] { ((TablePair)pair).getKey(),
                                      ((TablePair)pair).getElement(),
                                    });
        
        TableColumn column = null;
        column = paTable.getColumnModel().getColumn(0);
        column.setPreferredWidth(200);
        column = paTable.getColumnModel().getColumn(1);
        column.setPreferredWidth(1000);
    }
    
    public void ListTableDistricts(ITable paStructure, JTable paTable) throws ETable {
        
        DefaultTableModel dtm = new DefaultTableModel(0,0) {

            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        
        //DefaultTableModel dtm = new DefaultTableModel(0,0);
        dtm.setColumnIdentifiers(new String[] {"Okres"});
        paTable.setModel(dtm);
        for(Object pair : paStructure) 
            dtm.addRow(new Object[] { ((TablePair)pair).getKey(),
                                    });
    }
    
    public void ListTableOfTownsFromDistrict(ITable paStructure, JTable paTable) throws ETable {
        
        DefaultTableModel dtm = new DefaultTableModel(0,0) {

            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        
        //DefaultTableModel dtm = new DefaultTableModel(0,0);
        dtm.setColumnIdentifiers(new String[] {"Sidlo"});
        paTable.setModel(dtm);
        for(Object pair : paStructure) 
            dtm.addRow(new Object[] { ((TablePair)pair).getKey(),
                                      ((TablePair)pair).getElement()
                                    });
    }
    
    private void itemLoadFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLoadFromFileActionPerformed
        try {
            //*******************************************
            //*******************************************
            //*******************************************
            //*******************************************
            nacitajZoSuboru();
            ListTableDistrictAndTowns(aLand.getTabOkresov(), tableOfDistrictsAndTowns);
            ListTableTowns(aLand.getSidlaKrajiny(), tableOfTowns);
            ListTableDistricts(aLand.getTabOkresov(), tableOfDistricts);
            ListTableOfTownsFromDistrict(aLand.getTabOkresov(), tableOfDistricts);
            itemLoadFromFile.setVisible(false);
            
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Niekde nastala chyba" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Problem so sidlami v krajine" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemLoadFromFileActionPerformed

    private void tableOfDistrictsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOfDistrictsMouseClicked

        //po jednoduchom kliknuti sa na tabe "Sidla okresu" zobrazia vsetky sidla okresu
        if(evt.getClickCount() == 1){
            try {
                int cisloRiadku = tableOfDistricts.getSelectedRow();
                String nazovOkresu = (String) tableOfDistricts.getModel().getValueAt(cisloRiadku, 0);
                ListTableOfTownsFromDistrict(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), tableOfTownsFromDistrict);
            } catch (ETable ex) {
                JOptionPane.showMessageDialog(null, "Tabulka zblbla", "Mesidž", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
        //po dvojkliku sa zobrazia statistiky vybraneho okresu
        if(evt.getClickCount() == 2){
            try {
                String informacie = "";
                int cisloRiadku = tableOfDistricts.getSelectedRow();
                String nazovOkresu = (String) tableOfDistricts.getModel().getValueAt(cisloRiadku, 0);
                Okres zvolenyOkres = aLand.getTabOkresov().find(nazovOkresu);
                informacie += "<html><b>Abecedny zoznam sidiel okresu</b></html>" + "\n";
                
                int novyRiadok = 0;
                for(TablePair<String, Sidlo> town : zvolenyOkres.getSidlaOkresuZotriedene()){
                    informacie += town.getElement().getNazovSidla() + "  ►  ";
                    novyRiadok++;
                    if(novyRiadok % 4 == 0)
                        informacie += "\n";
                }
                informacie += "\n\n";
                
                informacie += "Okres mal najviac obyvatelov roku " + zvolenyOkres.getRokNajvacsiehoPoctuObyvatelovSidla() + "\n";
                informacie += "Okres mal najmenej obyvatelov roku " + zvolenyOkres.getRokNajmensiehoPoctuObyvatelovSidla() + "\n";
                informacie += "Absolutny prirastok v okrese od roku 1996 do 2014: " + zvolenyOkres.vypocitajAbsolutnyPrirastok(1996, 2014) + "\n";
                informacie += "Percentualny prirastok v okrese od roku 1996 do 2014: " + zvolenyOkres.vypocitajPercentualnyPrirastok(1996, 2014) + "\n";
                JOptionPane.showMessageDialog(null, informacie, "Štatistika okresu", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (ETable ex) {
                JOptionPane.showMessageDialog(null, "Tabulka zblbla", "Mesidž", JOptionPane.INFORMATION_MESSAGE);
            } catch (ETabulka ex) {
                JOptionPane.showMessageDialog(null, "Prirastky blbnu", "Mesidž", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        //po kliknuti s stlacenym ALTom sa zobrazi vyzva na zadanie roku, v ktorom chceme zistit hustotu obyvatelstva pre zvoleny okres
        else if(evt.getClickCount() == 1 && evt.isAltDown()){
            try {
                int cisloRiadku = tableOfDistricts.getSelectedRow();
                String nazovOkresu = (String) tableOfDistricts.getValueAt(cisloRiadku, 0);
                String rok = JOptionPane.showInputDialog(null, "Zadajte rok, v ktorom chcete vidiet hustotu obyvatelov pre okres " + nazovOkresu.substring(6),
                        "Hustota obyvatelstva okresu v roku <1996, 2014>", JOptionPane.QUESTION_MESSAGE);

                String hustotaOkresuVRoku = "Hustota okresu v roku " + rok + " bola ";
                hustotaOkresuVRoku += aLand.getStromOkresov().find(nazovOkresu).getPocetObyvatelovOkresuVDanomRoku(Integer.parseInt(rok));
                JOptionPane.showMessageDialog(null, hustotaOkresuVRoku, "Hustota okresu", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (ETabulka ex) {
                JOptionPane.showMessageDialog(null, "Chyba v matrixe" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
            } catch (ETable ex) {
                JOptionPane.showMessageDialog(null, "Tabulka zblbla" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_tableOfDistrictsMouseClicked

    private void itemVyhladajSidloPodlaNazvuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemVyhladajSidloPodlaNazvuActionPerformed
        try {
            String nazovSidla = JOptionPane.showInputDialog(null, "Zadajte presny nazov sidla/obce/mesta", "Ktore sidlo?", JOptionPane.QUESTION_MESSAGE);
            Sidlo town = aLand.getStromSidiel().find(nazovSidla);
            String townInfo = "";
            //collecting information ...
            townInfo += "Hladali ste informacie o sidle " + town.getNazovSidla() + "\n";
            townInfo += "Sidlo " + town.getNazovSidla() + " sa nachadza v okrese " + town.getOkresSidla().getNazovOkresu().substring(6) + ".\n";
            townInfo += "Sidlo islo na \"Rampage Baby Streak\" roku " + town.getRokNajmensiehoPoctuObyvatelovSidla() + "\n";
            townInfo += "Sidlo takmer \"vymrelo\" v roku " + town.getRokNajvacsiehoPoctuObyvatelovSidla() + "\n";
            townInfo += "Celkovo sa v sidle narodilo (ak je cislo zaporne, tak zomrelo) " + town.getPrirastokAbs() + "\n";
            townInfo += "Percentualne to znamena, ze pocet obyvatelov stupol (klesol) o " + town.getPrirastokPerc() + " percentualneho bodu" + "\n";
            //push information to the user
            JOptionPane.showMessageDialog(null, townInfo, "Informácie o sídle " + town.getNazovSidla(), JOptionPane.INFORMATION_MESSAGE);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Strom spadol " + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemVyhladajSidloPodlaNazvuActionPerformed

    private void itemVyhladajOkresPodlaNazvuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemVyhladajOkresPodlaNazvuActionPerformed
        try {
            String nazovOkresu = JOptionPane.showInputDialog(null, "Zadajte presny nazov okresu", "Ktory okres?", JOptionPane.QUESTION_MESSAGE);
            Okres district = aLand.getStromOkresov().find(nazovOkresu);
            String districtInfo = "";
            //collecting information ...
            districtInfo += "Hladali ste informacie o okrese " + district.getNazovOkresu().substring(6) + "\n";
            
            districtInfo += "<html><b>Abecedny zoznam sidiel okresu</b></html>" + "\n";
                
                int novyRiadok = 0;
                for(TablePair<String, Sidlo> town : district.getSidlaOkresuZotriedene()){
                    districtInfo += town.getElement().getNazovSidla() + "  ►  ";
                    novyRiadok++;
                    if(novyRiadok % 4 == 0)
                        districtInfo += "\n";
                }
                districtInfo += "\n\n";
            
            districtInfo += "Okres prezival velmi plodne obdobie v roku " + district.getRokNajvacsiehoPoctuObyvatelovSidla() + "\n";
            districtInfo += "a najmenej obyvatelov mal v roku " + district.getRokNajmensiehoPoctuObyvatelovSidla();
            //push information to the user
            JOptionPane.showMessageDialog(null, districtInfo, "Informácie o okrese " + district.getNazovOkresu(), JOptionPane.INFORMATION_MESSAGE);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Strom spadol " + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemVyhladajOkresPodlaNazvuActionPerformed

    private void tableOfTownsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOfTownsMouseClicked
        try {
            if(evt.getClickCount() == 2){
                int cisloRiadku = tableOfTowns.getSelectedRow();
                String nazovSidla = (String) tableOfTowns.getValueAt(cisloRiadku, 0);
                String rok = JOptionPane.showInputDialog(null, "Zadajte rok, v ktorom chcete vidiet hustotu obyvatelov pre sidlo " + nazovSidla,
                        "Hustota obyvatelstva sidla v roku <1996, 2014>", JOptionPane.QUESTION_MESSAGE);

                String hustotaSidlaVRoku = "Hustota sidla v roku " + rok + " bola ";
                hustotaSidlaVRoku += aLand.getStromSidiel().find(nazovSidla).getPocetObyvatelovSidlaVDanomRoku(Integer.parseInt(rok));
                JOptionPane.showMessageDialog(null, hustotaSidlaVRoku, "Hustota sidla", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Chyba v matrixe" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Tabulka zblbla" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_tableOfTownsMouseClicked

    
    //Triedenia vsetkych sidiel
    private void itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRokuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRokuActionPerformed
        try {
            String rok = JOptionPane.showInputDialog(null, "Triedenie vsetkych sidiel podla poctu obyvatelov v roku ...", "Triedenie vsetkych sidiel", JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            sorter.sort(aLand.getSidlaKrajiny(), new SidloPocetComparer(Integer.parseInt(rok)));
            ListTableTowns(aLand.getSidlaKrajiny(), tableOfTowns);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRokuActionPerformed

    private void itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokovActionPerformed
        try {
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie vsetkych sidiel podla absolutneho prirastku od roku ...", "Triedenie vsetkych sidiel", JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie vsetkych sidiel podla absolutneho prirastku do roku ...", "Triedenie vsetkych sidiel", JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            
            for(TablePair<String, Sidlo> town : aLand.getSidlaKrajiny()){
                town.getElement().vypocitajAbsolutnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            
            sorter.sort(aLand.getSidlaKrajiny(), new SidloAbsPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableTowns(aLand.getSidlaKrajiny(), tableOfTowns);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokovActionPerformed

    private void itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokovActionPerformed
        try {
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie vsetkych sidiel podla percentualneho prirastku od roku ...", "Triedenie vsetkych sidiel", JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie vsetkych sidiel podla percentualneho prirastku do roku ...", "Triedenie vsetkych sidiel", JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            for(TablePair<String, Sidlo> town : aLand.getSidlaKrajiny()){
                town.getElement().vypocitajPercentualnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            sorter.sort(aLand.getSidlaKrajiny(), new SidloPercPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableTowns(aLand.getSidlaKrajiny(), tableOfTowns);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokovActionPerformed

    
    //Triedenia sidiel v okrese
    private void itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRokuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRokuActionPerformed
        try {
            String nazovOkresu = (String) tableOfDistricts.getValueAt(tableOfDistricts.getSelectedRow(), 0);
            String rok = JOptionPane.showInputDialog(null, "Triedenie sidiel okresu " + nazovOkresu.substring(6) + " podla poctu obyvatelov v roku ...", "Triedenie sidiel - " + nazovOkresu, JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            sorter.sort(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), new SidloPocetComparer(Integer.parseInt(rok)));
            ListTableOfTownsFromDistrict(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), tableOfTownsFromDistrict);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRokuActionPerformed

    private void itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokovActionPerformed
        try {
            String nazovOkresu = (String) tableOfDistricts.getValueAt(tableOfDistricts.getSelectedRow(), 0);
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie sidiel okresu podla absolutneho prirastku od roku ...", "Triedenie sidiel - " + nazovOkresu, JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie sidiel okresu podla absolutneho prirastku do roku ...", "Triedenie sidiel - " + nazovOkresu, JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            //prepocitaj hodnoty
            for(TablePair<String, Sidlo> town : aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu()){
                town.getElement().vypocitajAbsolutnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            
            sorter.sort(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), new SidloAbsPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableOfTownsFromDistrict(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), tableOfTownsFromDistrict);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokovActionPerformed

    private void itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokovActionPerformed
        try {
            String nazovOkresu = (String) tableOfDistricts.getValueAt(tableOfDistricts.getSelectedRow(), 0);
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie sidiel okresu podla percentualneho prirastku od roku ...", "Triedenie sidiel - " + nazovOkresu, JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie sidiel okresu podla percentualneho prirastku do roku ...", "Triedenie sidiel - " + nazovOkresu, JOptionPane.QUESTION_MESSAGE);
            SidloSorter sorter = new SidloSorter();
            //prepocitaj hodnoty
            for(TablePair<String, Sidlo> town : aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu()){
                town.getElement().vypocitajPercentualnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            
            sorter.sort(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), new SidloAbsPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableOfTownsFromDistrict(aLand.getTabOkresov().find(nazovOkresu).getSidlaOkresu(), tableOfTownsFromDistrict);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokovActionPerformed

    
    
    
    //Triedenie okresov
    private void ZoradOkresyPodlaPoctuObyvatelovVDanomRokuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoradOkresyPodlaPoctuObyvatelovVDanomRokuActionPerformed
        try {
            String rok = JOptionPane.showInputDialog(null, "Triedenie vsetkych okresov podla poctu obyvatelov v roku ...", "Triedenie vsetkych okresov", JOptionPane.QUESTION_MESSAGE);
            OkresSorter sorter = new OkresSorter();
            sorter.sort(aLand.getTabOkresov(), new OkresPocetComparer(Integer.parseInt(rok)));
            ListTableDistricts(aLand.getTabOkresov(), tableOfDistricts);
            
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ZoradOkresyPodlaPoctuObyvatelovVDanomRokuActionPerformed

    private void itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokovActionPerformed
        try {
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie vsetkych okresov podla absolutneho prirastku od roku ...", "Triedenie vsetkych okresov", JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie vsetkych okresov podla absolutneho prirastku do roku ...", "Triedenie vsetkych okresov", JOptionPane.QUESTION_MESSAGE);
            OkresSorter sorter = new OkresSorter();
            
            for(TablePair<String, Okres> district : aLand.getTabOkresov()){
                district.getElement().vypocitajAbsolutnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            
            sorter.sort(aLand.getTabOkresov(), new OkresAbsPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableDistricts(aLand.getTabOkresov(), tableOfDistricts);
            
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokovActionPerformed

    private void itemZoradOkresyPodlaPercPrirastkuVRozmedziRokovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemZoradOkresyPodlaPercPrirastkuVRozmedziRokovActionPerformed
        try {
            String rokOd = JOptionPane.showInputDialog(null, "Triedenie vsetkych okresov podla absolutneho prirastku od roku ...", "Triedenie vsetkych okresov", JOptionPane.QUESTION_MESSAGE);
            String rokDo = JOptionPane.showInputDialog(null, "Triedenie vsetkych okresov podla absolutneho prirastku do roku ...", "Triedenie vsetkych okresov", JOptionPane.QUESTION_MESSAGE);
            OkresSorter sorter = new OkresSorter();
            
            for(TablePair<String, Okres> district : aLand.getTabOkresov()){
                district.getElement().vypocitajPercentualnyPrirastok(Integer.parseInt(rokOd), Integer.parseInt(rokDo));
            }
            
            sorter.sort(aLand.getTabOkresov(), new OkresPercPrirastokComparer(Integer.parseInt(rokOd), Integer.parseInt(rokDo)));
            ListTableDistricts(aLand.getTabOkresov(), tableOfDistricts);
            
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Sort sa nepodaril" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Nepodarilo sa prepocitat" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_itemZoradOkresyPodlaPercPrirastkuVRozmedziRokovActionPerformed

    private void tableOfTownsFromDistrictMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOfTownsFromDistrictMouseClicked
        try {
            if(evt.getClickCount() == 2){
                int cisloRiadku = tableOfTownsFromDistrict.getSelectedRow();
                String nazovSidla = (String) tableOfTownsFromDistrict.getValueAt(cisloRiadku, 0);
                String rok = JOptionPane.showInputDialog(null, "Zadajte rok, v ktorom chcete vidiet hustotu obyvatelov pre sidlo " + nazovSidla,
                        "Hustota obyvatelstva sidla v roku <1996, 2014>", JOptionPane.QUESTION_MESSAGE);

                String hustotaSidlaVRoku = "Hustota sidla v roku " + rok + " bola ";
                hustotaSidlaVRoku += aLand.getStromSidiel().find(nazovSidla).getPocetObyvatelovSidlaVDanomRoku(Integer.parseInt(rok));
                JOptionPane.showMessageDialog(null, hustotaSidlaVRoku, "Hustota sidla", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ETabulka ex) {
            JOptionPane.showMessageDialog(null, "Chyba v matrixe" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        } catch (ETable ex) {
            JOptionPane.showMessageDialog(null, "Tabulka zblbla" + ex.getMessage(), "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_tableOfTownsFromDistrictMouseClicked
    
    private void coNaToCompareTest(){
        int rok1 = Integer.parseInt(JOptionPane.showInputDialog("rok1"));
        int rok2 = Integer.parseInt(JOptionPane.showInputDialog("rok2"));
        JOptionPane.showMessageDialog(null, compareTest(rok1, rok2));
    }
    
    /**
     * testovacia metoda pre komparatory
     * iba demo, ci metoda na porovnavanie funguje spravne
     * @param paRok1
     * @param paRok2
     * @return 
     */
    private int compareTest(int paRok1, int paRok2){
        if(paRok1 == paRok2)
            return 0;
        else if(paRok1 < paRok2)
            return -1;
        //paFirst.getPocetObyvatelovSidlaVDanomRoku(aRok) > paSecond.getPocetObyvatelovSidlaVDanomRoku(aRok)
        return 1;
    }
    
    
    /**
     * zdrojovy subor som bol nuteny upravit, pretoze sa stavalo, ze dva rozne okresy mali obec s rovnakym nazvom
     * preto nastala vynimka, ked som pridaval sidla do tabulky sidiel v krajine
     * @throws ETabulka 
     */
    public void nacitajZoSuboru() throws ETabulka{
        try {
            File f = new File("testBezDuplicit.txt");
            Scanner scan = new Scanner(f);
            String aktualnyOkres = "";
            String dalsiNazovOkresu = "";
            String nazovSidla = "";
            Okres district = null;
            Sidlo town = null;
            float hustota = 0;
            
            
            while(scan.hasNextLine()){
                //nacitaj dalsi nazov okresu a porovnaj ho s predchadzajucim nazvom
                dalsiNazovOkresu = scan.nextLine();
                
                if(!dalsiNazovOkresu.equals(aktualnyOkres)){  //ak su nazvy rozne
                    aktualnyOkres = dalsiNazovOkresu;   //poloz aktualny nazov okresu rovny dalsiemu okresu
                    district = new Okres(aktualnyOkres);    //vytvor tento novy okres
                    aLand.pridajOkres(district);    //pridaj okres do krajiny
                    aLand.pridajOkresDoArrayOkresov(district);      //pridaj okres aj do array okresov pre jednoduchsie vyhladavanie
                    aLand.pridajOkresDoStromuOkresov(district);     //okres sa prida do stromu okresov pre rychle vyhladanie podla nazvu
                }
                
                //v opacnom pripade sa aktualny nazov okresu rovna dalsiemu nazvu okresu
                //okres sa potom uz nachadza v tabulke okresov, staci mu len pridat nove sidlo
                nazovSidla = scan.nextLine();
                town = new Sidlo(nazovSidla);
                aLand.pridajSidloDoKrajiny(town);   //sidlo sa prida do krajiny
                aLand.pridajSidloDoStromuSidiel(town);  //sidlo sa prida do stromu sidiel pre rychle vyhladanie podla nazvu
                district.pridajSidloDoOkresu(town); //sidlo sa prida do okresu
                district.pridajSidloDoOkresuVAbecednomPoradi(town);
                district.pridajSidloDoArraySidielOkresu(town);  //sidlo sa prida do arraylistu sidiel v okrese pre jednoduchsie vyhladavanie a jednoduchsie pocitanie roku, kedy mal okres najviac/najmenej obyvatelov a inych veci
                
                for (int i = 0; i < 19; i++) {
                    hustota = Float.parseFloat( scan.nextLine() );
                    town.pridajZaznamDoHustotyObyv(i, hustota); //sidlo zhromazdi informacie o hustote obyvatelstva
                }
                town.setOkresSidla(district);
                town.vypocitajRokNajmensiehoPoctuObyvatelovSidla();
                town.vypocitajRokNajvacsiehoPoctuObyvatelovSidla();
                town.vypocitajAbsolutnyPrirastok(1996, 2014);
                town.vypocitajPercentualnyPrirastok(1996, 2014);
                
                district.naplnPolePoctuObyvatelovOkresu();      //najprv napln pole poctu obyvatelov v okrese 
                district.vypocitajRokNajmensiehoPoctuObyvatelovOkresu();    //zakazdym sa vypocita rok, kedy mal okres najmenej a najviac obyvatelov, absolutny a percentualny prirastok okresu
                district.vypocitajRokNajvacsiehoPoctuObyvatelovOkresu();
                district.vypocitajAbsolutnyPrirastok(1996, 2014);
                district.vypocitajPercentualnyPrirastok(1996, 2014);
                
                kolkyRiadok += 21;
            }
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Subor neexistuje", "Mesidž", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ZoradOkresyPodlaPoctuObyvatelovVDanomRoku;
    private javax.swing.JMenuItem itemLoadFromFile;
    private javax.swing.JMenuItem itemVyhladajOkresPodlaNazvu;
    private javax.swing.JMenuItem itemVyhladajSidloPodlaNazvu;
    private javax.swing.JMenuItem itemZoradOkresyPodlaAbsPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradOkresyPodlaPercPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradSidlaOkresuPodlaAbsPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradSidlaOkresuPodlaPercPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradSidlaOkresuPodlaPoctuObyvatelovVDanomRoku;
    private javax.swing.JMenuItem itemZoradVsetkySidlaPodlaAbsPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradVsetkySidlaPodlaPercPrirastkuVRozmedziRokov;
    private javax.swing.JMenuItem itemZoradVsetkySidlaPodlaPoctuObyvatelovVDanomRoku;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPanel panelOkresy;
    private javax.swing.JTabbedPane panelOkresyASidla;
    private javax.swing.JPanel panelSidielOkresu;
    private javax.swing.JPanel panelSidla;
    private javax.swing.JTable tableOfDistricts;
    private javax.swing.JTable tableOfDistrictsAndTowns;
    private javax.swing.JTable tableOfTowns;
    private javax.swing.JTable tableOfTownsFromDistrict;
    // End of variables declaration//GEN-END:variables
}
