package gui;

import javax.swing.DefaultListModel;
import datastructures.lists.EList;
import datastructures.lists.IList;
import java.text.DecimalFormat;

/**
 *
 * @author Michal Varga
 */
public class PanelList extends javax.swing.JPanel {

    private static final int ADD = 0;
    private static final int INSERT = 1;
    private static final int DELETE = 2;
    private static final int DELETE_FROM_INDEX = 3;
    private static final int INDEX_OF = 4;
    private static final int SIZE = 5;
    private static final int CLEAR = 6; 
    
    private IList aList;
    private IEditData aEditData;        
    
    private void setEnabledComponents(boolean paValue) {
        btnAdd.setEnabled(paValue);
        btnInsert.setEnabled(paValue);
        btnDelete.setEnabled(paValue);
        btnDeleteFromIndex.setEnabled(paValue);
        btnIndexOf.setEnabled(paValue);
        btnSize.setEnabled(paValue);
        btnClear.setEnabled(paValue);
        btnTest.setEnabled(paValue);
        btnTestAdd.setEnabled(paValue);
        btnTestInsert.setEnabled(paValue);
        btnTestDelete.setEnabled(paValue);        
    }
    
    /**
     * Creates new form panelList
     */
    public PanelList() {
        initComponents();
        
        aList = null;
        aEditData = null;
        
        setEnabledComponents(false);
        
        panelOperations.registerOperation(ADD, "Add");
        panelOperations.registerOperation(INSERT, "Insert");
        panelOperations.registerOperation(DELETE, "Delete");
        panelOperations.registerOperation(DELETE_FROM_INDEX, "Delete from index");
        panelOperations.registerOperation(INDEX_OF, "Index of");
        panelOperations.registerOperation(SIZE, "Size");
        panelOperations.registerOperation(CLEAR, "Clear");        
    }
    
    public void init(IList paList, IEditData paEditData) {
        aList = paList;
        aEditData = paEditData;
        
        Routines.listListElements(aList, listElements);
        
        setEnabledComponents(true);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPaneElements = new javax.swing.JScrollPane();
        listElements = new javax.swing.JList();
        lblElements = new javax.swing.JLabel();
        toolsList = new javax.swing.JToolBar();
        lblOperationsList = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnDeleteFromIndex = new javax.swing.JButton();
        btnIndexOf = new javax.swing.JButton();
        btnSize = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        panelOperations = new gui.PanelOperations();
        toolsTests = new javax.swing.JToolBar();
        lblOperationsTest = new javax.swing.JLabel();
        btnTestAdd = new javax.swing.JButton();
        btnTestInsert = new javax.swing.JButton();
        btnTestDelete = new javax.swing.JButton();
        btnTest = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(300, 400));

        listPaneElements.setViewportView(listElements);

        lblElements.setText("Elements");

        toolsList.setRollover(true);

        lblOperationsList.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblOperationsList.setText("Operations:");
        toolsList.add(lblOperationsList);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        toolsList.add(btnAdd);

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        toolsList.add(btnInsert);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        toolsList.add(btnDelete);

        btnDeleteFromIndex.setText("Delete from index");
        btnDeleteFromIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFromIndexActionPerformed(evt);
            }
        });
        toolsList.add(btnDeleteFromIndex);

        btnIndexOf.setText("Index of");
        btnIndexOf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndexOfActionPerformed(evt);
            }
        });
        toolsList.add(btnIndexOf);

        btnSize.setText("Size");
        btnSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSizeActionPerformed(evt);
            }
        });
        toolsList.add(btnSize);

        btnClear.setText("Clear");
        btnClear.setFocusable(false);
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        toolsList.add(btnClear);

        toolsTests.setRollover(true);

        lblOperationsTest.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblOperationsTest.setText("Testing:");
        toolsTests.add(lblOperationsTest);

        btnTestAdd.setText("Add");
        btnTestAdd.setFocusable(false);
        btnTestAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTestAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTestAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestAddActionPerformed(evt);
            }
        });
        toolsTests.add(btnTestAdd);

        btnTestInsert.setText("Insert");
        btnTestInsert.setFocusable(false);
        btnTestInsert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTestInsert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTestInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestInsertActionPerformed(evt);
            }
        });
        toolsTests.add(btnTestInsert);

        btnTestDelete.setText("Delete");
        btnTestDelete.setFocusable(false);
        btnTestDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTestDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTestDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestDeleteActionPerformed(evt);
            }
        });
        toolsTests.add(btnTestDelete);

        btnTest.setText("Complex test");
        btnTest.setFocusable(false);
        btnTest.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTest.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });
        toolsTests.add(btnTest);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolsList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelOperations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
            .addComponent(toolsTests, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listPaneElements)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblElements)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolsList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolsTests, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblElements)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listPaneElements, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOperations, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            Object data = aEditData.createData();
            if (data != null) {  
                panelOperations.start(ADD);
                aList.add(data);
                panelOperations.finish(ADD,true);
            }
            else
               panelOperations.abort(ADD,true);
        } catch (EList ex) {
            panelOperations.except(ADD,ex,true);
        }
        
        Routines.listListElements(aList, listElements);  
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        try {
            Object data = aEditData.createData();
            if (data != null) {  
                int index = Routines.getIntDialog("Insert index");
                panelOperations.start(INSERT);
                aList.insert(data,index);
                panelOperations.finish(INSERT,true);
            }
            else
               panelOperations.abort(INSERT,true);
        } catch (EList ex) {
            panelOperations.except(INSERT,ex,true);
        }
        
        Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {            
            Object data = -1 != listElements.getSelectedIndex() ? listElements.getModel().getElementAt(listElements.getSelectedIndex()) : null;
                        
            if (data != null) {  
                panelOperations.start(DELETE);
                aList.delete(data);
                panelOperations.finish(DELETE,true);
            }
            else
               panelOperations.abort(DELETE,true);
        } catch (EList ex) {
            panelOperations.except(DELETE,ex,true);
        }
        
        Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteFromIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFromIndexActionPerformed
        try {            
            int index = Routines.getIntDialog("Insert index");
            if (index != -1) {
                panelOperations.start(DELETE_FROM_INDEX);
                aList.deleteFromIndex(index);
                panelOperations.finish(DELETE_FROM_INDEX,true);                
            }
            else
                 panelOperations.abort(DELETE_FROM_INDEX,true);
        } catch (EList ex) {
            panelOperations.except(DELETE_FROM_INDEX,ex,true);
        }        
        Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnDeleteFromIndexActionPerformed

    private void btnIndexOfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndexOfActionPerformed
       try {            
            Object data = -1 != listElements.getSelectedIndex() ? listElements.getModel().getElementAt(listElements.getSelectedIndex()) : null;
                        
            if (data != null) {  
                panelOperations.start(INDEX_OF);
                int index = aList.indexOf(data);
                panelOperations.finish(INDEX_OF,Integer.toString(index),true);                
            }
            else
               panelOperations.abort(INDEX_OF,true);
        } catch (EList ex) {
            panelOperations.except(INDEX_OF,ex,true);
        }
    }//GEN-LAST:event_btnIndexOfActionPerformed

    private void btnSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSizeActionPerformed
        try { 
            panelOperations.start(SIZE);
            int size = aList.size();        
            panelOperations.finish(SIZE,Integer.toString(size),true);
        } catch (EList ex) {
            panelOperations.except(SIZE,ex,true);
        }
    }//GEN-LAST:event_btnSizeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        try { 
            panelOperations.start(CLEAR);
            aList.clear();
            panelOperations.finish(CLEAR,true);
            Routines.listListElements(aList, listElements);
        } catch (EList ex) {
            panelOperations.except(CLEAR,ex,true);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    @SuppressWarnings("static-access")
    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        try {                        
            int iterations = Routines.getIntDialog("Number of iterations");
            if (iterations != -1) {
                int countAdd = 0;
                int countInsert = 0;
                int countDelete = 0;
                
                panelOperations.start(ADD);                                               
                panelOperations.start(INSERT);
                panelOperations.start(DELETE);
                
                panelOperations.pause(ADD);                                               
                panelOperations.pause(INSERT);
                panelOperations.pause(DELETE);
                
                for(int i = 0; i < iterations; i++) {
                                        
                    int index = aList.size() == 0 ? 0 : Routines.random(aList.size());                    
                    int operation = Routines.random(aList.size() == 0 ? 2 : 3);
                    
                    switch(operation) {
                        case 0:
                            countAdd++;
                            panelOperations.resume(ADD);
                            aList.add(aEditData.createRandomData());                            
                            panelOperations.pause(ADD);
                            break;
                        case 1:
                            countInsert++;
                            panelOperations.resume(INSERT);
                            aList.insert(aEditData.createRandomData(),index);
                            panelOperations.pause(INSERT);
                            break;
                        case 2:
                            countDelete++;
                            panelOperations.resume(DELETE);
                            aList.deleteFromIndex(index);
                            panelOperations.pause(DELETE);
                            break;
                    }                                                                            
                }                
                                
                long timeAdd = panelOperations.finish(ADD, true); 
                long timeInsert = panelOperations.finish(INSERT, true);
                long timeDelete = panelOperations.finish(DELETE, true);
                
                DecimalFormat decFormat = new DecimalFormat( "# ###0.0000" );
                
                panelOperations.log("Number of add operations: " + countAdd + " average time: " + decFormat.format(timeAdd/(double)countAdd) + PanelOperations.UNITS);
                panelOperations.log("Number of insert operations: " + countInsert + " average time: " + decFormat.format(timeInsert/(double)countInsert) + PanelOperations.UNITS);
                panelOperations.log("Number of delete operations: " + countDelete + " average time: " + decFormat.format(timeDelete/(double)countDelete) + PanelOperations.UNITS);
            }
            else {
                panelOperations.abort(ADD,false);
                panelOperations.abort(INSERT,false);
                panelOperations.abort(DELETE,false);
            }
        } catch (EList ex) {
            panelOperations.except(ADD,ex,false);
            panelOperations.except(INSERT,ex,false);
            panelOperations.except(DELETE,ex,false);
        }     
         
         Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnTestActionPerformed

    private void btnTestDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestDeleteActionPerformed
        try {            
            int iterations = Routines.getIntDialog("Number of iterations");
            if (iterations != -1) {
                panelOperations.start(DELETE);                
                
                iterations = iterations < aList.size() ? iterations : aList.size();
                
                for(int i = 0; i < iterations; i++) {
                    panelOperations.pause(DELETE);
                    int index = Routines.random(aList.size() + 1);
                    panelOperations.resume(DELETE);
                    
                    aList.deleteFromIndex(index);
                }                
                                
                long time = panelOperations.finish(DELETE,true); 
                panelOperations.log("Average time: " + (time/(double)iterations) + PanelOperations.UNITS);
            }
            else
                 panelOperations.abort(DELETE,true);
        } catch (EList ex) {
            panelOperations.except(DELETE,ex,true);
        }     
         
         Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnTestDeleteActionPerformed

    private void btnTestInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestInsertActionPerformed
        try {            
            int iterations = Routines.getIntDialog("Number of iterations");
            if (iterations != -1) {
                panelOperations.start(INSERT);                
                
                for(int i = 0; i < iterations; i++) {
                    panelOperations.pause(INSERT);
                    int index = Routines.random(aList.size() + 1);
                    panelOperations.resume(INSERT);
                    
                    aList.insert(aEditData.createRandomData(),index);
                }                
                                
                long time = panelOperations.finish(INSERT,true); 
                panelOperations.log("Average time: " + (time/(double)iterations) + PanelOperations.UNITS);
            }
            else
                 panelOperations.abort(INSERT,true);
        } catch (EList ex) {
            panelOperations.except(INSERT,ex,true);
        }     
         
         Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnTestInsertActionPerformed

    private void btnTestAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestAddActionPerformed
         try {            
            int iterations = Routines.getIntDialog("Number of iterations");
            if (iterations != -1) {
                panelOperations.start(ADD);                
                
                for(int i = 0; i < iterations; i++) {
                    aList.add(aEditData.createRandomData());
                }                
                                
                long time = panelOperations.finish(ADD,true); 
                panelOperations.log("Average time: " + (time/(double)iterations) + PanelOperations.UNITS);                
            }
            else
                 panelOperations.abort(ADD,true);
        } catch (EList ex) {
            panelOperations.except(ADD,ex,true);
        }     
         
         Routines.listListElements(aList, listElements);
    }//GEN-LAST:event_btnTestAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteFromIndex;
    private javax.swing.JButton btnIndexOf;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSize;
    private javax.swing.JButton btnTest;
    private javax.swing.JButton btnTestAdd;
    private javax.swing.JButton btnTestDelete;
    private javax.swing.JButton btnTestInsert;
    private javax.swing.JLabel lblElements;
    private javax.swing.JLabel lblOperationsList;
    private javax.swing.JLabel lblOperationsTest;
    private javax.swing.JList listElements;
    private javax.swing.JScrollPane listPaneElements;
    private gui.PanelOperations panelOperations;
    private javax.swing.JToolBar toolsList;
    private javax.swing.JToolBar toolsTests;
    // End of variables declaration//GEN-END:variables
}
