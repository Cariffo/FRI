#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <sched.h>
#define NUM_THREADS 2

pthread_t tid[NUM_THREADS];
int cislo = 0;
int x=1;
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond_gen = PTHREAD_COND_INITIALIZER;
pthread_cond_t cond_hrac = PTHREAD_COND_INITIALIZER;

void * generator(void * parm) {
	int i=0;
	for(i=0;i<5;i++) {
		pthread_mutex_lock(&mut);
		while (x > 1) {
			pthread_cond_wait(&cond_gen, &mut);
		}
		sleep(1);
		srand ( time(NULL) );
		cislo = rand() % 80 + 1;
		printf("vygenerovane cislo: %d\n", cislo);
		x=11;
		pthread_cond_signal(&cond_hrac);
		pthread_mutex_unlock(&mut);
		sched_yield();
	}
}

void * hrac(void * parm) {
	int j=1;
	int k=1;
	for(j=1;j<=5;j++) {
		for(k=1;k<=10;k++){
			pthread_mutex_lock(&mut);
			while (x == 1) {
				pthread_cond_wait(&cond_hrac, &mut);
			}
			x = x-1;
			printf("zrebovanie: %d ", j);
			printf("hrac: %d ", k);
			printf("precital cislo: %d\n", cislo);
			if (x == 1) {
				pthread_cond_signal(&cond_gen);
			}
			pthread_mutex_unlock(&mut);
			sched_yield();
		}
	}
}

main( int argc, char *argv[] ) {
	int i=0;
	pthread_create(&tid[i], NULL, generator, NULL);
	pthread_create(&tid[i], NULL, hrac, NULL);
	

	for ( i = 0; i < NUM_THREADS; i++) {
		pthread_join(tid[i], NULL);
	}
	return 0;
}